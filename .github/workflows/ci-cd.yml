name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: docker.io
  IMAGE_NAME: dexinfinity/docker-test-project

jobs:
  # Continuous Integration - Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Only read permissions are needed for this job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          echo "Linting step..."
          # npm run lint

      - name: Run unit tests
        run: npm test
        env:
          NODE_ENV: test
          PORT: 9000

      - name: Run integration tests (optional)
        run: |
          echo "Integration tests require a running server"
          echo "These can be run locally with: npm run test:integration"
        continue-on-error: true

      - name: Build project (or use the Docker build step below)
        run: echo "Project built. Skipping the `docker-build` step for now."

  # Security Scans
  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read # Read permissions are needed to read the code
      security-events: write # Write permissions are needed to upload SARIF results

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 1: Run Trivy vulnerability scan for the file system
      - name: Run Trivy vulnerability scanner (file system)
        uses: aquasecurity/trivy-action@0.22.0 # Use a specific version, not 'master'
        with:
          scan-type: 'fs'
          security-checks: 'vuln,secret,config'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'

      # Step 2: Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Upload results even if the previous step fails
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Step 3: Run CodeQL analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript' # Specify the language(s) to analyze
      
      - name: Autobuild # Required step for CodeQL on some languages
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Docker Build and Push
  docker-build:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}} # Requires a semver tag to work
            type=sha,prefix={{branch}}-
      
      # Step: Build and push the image, specifying a specific sha for the action
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (Main branch only)
  deploy-production:
    needs: [build-and-test, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      contents: read

    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add your deployment commands here

  # Deploy to Staging (Develop branch)
  deploy-staging:
    needs: [build-and-test, docker-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    permissions:
      contents: read
      
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Add your staging deployment commands here
